//
//  SearchViewController.swift
//  CleanSwiftArchitectureExample
//
//  Created by Evgeniy Antonov on 7/26/18.
//  Copyright (c) 2018 Evgeniy Antonov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchDisplayLogic: class {
    func displayCoctails(viewModel: Search.Coctails.ViewModel)
    func displayError(viewModel: Search.Coctails.ViewModel)
}

class SearchViewController: UIViewController, SearchDisplayLogic {
    @IBOutlet weak var searchTextField: UITextField!
    
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        SearchConfigurator.shared.configure(self)
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // TODO: setup
    }
    
    // MARK: Display
    
    func displayCoctails(viewModel: Search.Coctails.ViewModel) {
        print(viewModel.coctails ?? "success")
    }
    
    func displayError(viewModel: Search.Coctails.ViewModel) {
        print(viewModel.errorMessage ?? "failure")
    }
    
    // MARK: - Actions
    
    @IBAction func searchDidPress(_ sender: UIButton) {
        let searchPhrase = searchTextField.text
        let request = Search.Coctails.Request(searchPhrase: searchPhrase)
        interactor?.search(request: request)
    }
}
